name: CI

on:
  pull_request:
    branches: [ master ] # Automatic test
  push:
    branches: [ master ] # Automatic update
  schedule:
    - cron: 0 4 * * *    # Daily test
    - cron: 5 */6 * * *  # Scheduled update
  workflow_dispatch:     # Manual run
    inputs:
      type:
        description: Type of action
        required: true
        type: choice
        options:
          - Test packages
          - Update packages
      packages:
        description: Packages (optional comma-separated values)
        type: string

env:
  # Set au version to use or omit to use the latest. Specify branch name to use development version from Github
  au_version: master
  au_push: true
  # Force test: use 1 to test all, or N to split testing into N groups
  au_test_groups: 1

  # Github token to commit pushed packages to repository
  github_user_repo: ${{ github.repository }}
  github_api_key: ${{ secrets.GITHUB_TOKEN }}

  # Mail credentials - for error notifications
  mail_user: ${{ secrets.MAIL_USER }}
  mail_pass: ${{ secrets.MAIL_PASS }}
  mail_server: smtp.gmail.com
  mail_port: 587
  mail_enablessl: true

  # ID of the gist used to save run results - create a gist under the github_user (secret or not) and grab the id - https://gist.github.com/name/id
  # Optional, leave empty to create anonymous gist
  gist_id: c09573f2f23bc2aa904d90ff63de2cfe

  # Force test: gist id for test results
  gist_id_test: 83dd81cb41ebc10ef87ee50b168aca3f

  # Chocolatey API key - to push updated packages
  api_key: ${{ secrets.CHOCOLATEY_KEY }}

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Setup git configuration
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "<>"
          git config --global core.safecrlf false

      - name: Checkout
        uses: actions/checkout@v3

      - name: Show debug information
        run: |
          Get-CimInstance Win32_OperatingSystem -Property Caption, OSArchitecture, Version | Format-List Caption, OSArchitecture, Version
          $PSVersionTable
          git --version
          choco --version

      - name: Install AU
        run: |
          git clone -q https://github.com/majkinetor/au.git $Env:TEMP/au
          . "$Env:TEMP/au/scripts/Install-AU.ps1" $Env:au_version

      - name: Install chocolatey-core.extension
        run: cinst chocolatey-core.extension #required for several packages

      - name: Determine packages
        if: github.event_name != 'schedule'
        run: |
          $packages = switch ($Env:EventName) {
            'pull_request'      { $Env:PullRequestTitle }
            'push'              { $Env:CommitMessage }
            'workflow_dispatch' { $Env:ManualPackages }
            default             { throw "Unexpected event: $Env:EventName" }
          }
          if ($Env:EventName -in 'pull_request', 'push') {
            # PR title/commit message is expected to follow Conventional Commits
            # If so, packages will be specified as comma-separated values in the scope
            $packages = if ($packages -match '^\w+\((?<Scope>[^()\r\n]+)\)!?:') {
              $Matches.Scope
            }
          }
          # Accept space-separated values as well
          $packages = $packages -replace ',',' ' -replace '\s+',' '
          if ($$packages) {
            "Packages:"
            $packages -split ' ' | ForEach-Object {
              "- $_"
            }
            "ForcedPackages=$packages" | Out-File $Env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            "All packages will be processed"
          }
        env:
          EventName: github.event_name
          PullRequestTitle: ${{ github.event.pull_request.title }}
          CommitMessage: ${{ github.event.head_commit.message }}
          ManualPackages: ${{ inputs.packages }}

      - name: Test packages
        if: github.event_name == 'pull_request' || github.event.schedule == '0 4 * * *' || inputs.type == 'Test packages'
        run: ./test_all.ps1 "random $Env:au_test_groups"

      - name: Update packages
        if: github.event_name != 'pull_request' && github.event.schedule != '0 4 * * *' && inputs.type != 'Test packages'
        run: ./update_all.ps1 -ForcedPackages $Env:ForcedPackages

      - name: Publish job summary
        if: always() && hashFiles('Update-AUPackages.md')
        run: Get-Content 'Update-AUPackages.md' | Out-File $Env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append

      - name: Upload Info artifact
        uses: actions/upload-artifact@v3.1.0
        if: always() && hashFiles('update_info.xml')
        with:
          name: Info
          path: update_info.xml
