name: CI

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]
    branches: [ master ] # Automatic test on PR's scope (if any) or all packages
  push:
    branches: [ master ] # Automatic update of all packages
  schedule:
    - cron: 0 4 * * *    # Daily test of all packages
    - cron: 5 */6 * * *  # Scheduled update of all packages
  workflow_dispatch:     # Manual run
    inputs:
      type:
        description: Type of action
        required: true
        type: choice
        options:
          - Test packages
          - Update packages
      packages:
        description: Packages (optional, comma-separated values)
        type: string
      force:
        description: Force update (requires packages)
        type: boolean

env:
  # Set au version to use or omit to use the latest. Specify branch name to use development version from Github
  au_version: master
  # Force test: use 1 to test all, or N to split testing into N groups
  au_test_groups: 1

  # Mail settings - for error notifications
  mail_user: tdemoulins@gmail.com
  mail_server: smtp.gmail.com
  mail_port: 587
  mail_enablessl: true

  # ID of the gist used to save run results - create a gist under the github_user (secret or not) and grab the id - https://gist.github.com/name/id
  # Optional, leave empty to create anonymous gist
  gist_id: c09573f2f23bc2aa904d90ff63de2cfe

  # Force test: gist id for test results
  gist_id_test: 83dd81cb41ebc10ef87ee50b168aca3f

jobs:
  build:
    name: ${{ (github.event_name == 'pull_request' || github.event.schedule == '0 4 * * *' || inputs.type == 'Test packages') && 'Test packages' || 'Update packages' }}
    runs-on: windows-latest

    steps:
      - name: Set up git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "<>"
          git config --global core.safecrlf false

      - name: Checkout
        uses: actions/checkout@v3

      - name: Show context
        run: |
          Get-CimInstance Win32_OperatingSystem -Property Caption, OSArchitecture, Version | Format-List Caption, OSArchitecture, Version
          $PSVersionTable
          git --version
          "chocolatey version $(choco --version)"

      - name: Determine PR scope
        if: github.event_name == 'pull_request'
        run: |
          # PR title is expected to follow Conventional Commits
          # If so, packages will be specified in the commit scope
          if ($Env:PullRequestTitle -match '^\w+\((?<Scope>[^()\r\n]+)\)!?:') {
            # Handle both comma and space-separated values
            $scope = $Matches.Scope -replace ',',' ' -replace '\s+',' '
            $packages, $invalidPackages = ($scope -split ' ').Where({ Test-Path $_ }, 'Split')
            "Scope:"
            $packages | ForEach-Object {
              "- $_"
            }
            "PackageScope=$packages" >> $Env:GITHUB_ENV
            if ($invalidPackages) {
              throw "Some packages do not exist or are invalid: `"$($invalidPackages -join '","')`""
            }
          } else {
            "No specific scope, all packages will be processed"
          }
        env:
          PullRequestTitle: ${{ github.event.pull_request.title }}

      - name: Determine manual scope
        if: github.event_name == 'workflow_dispatch'
        run: |
          if ($Env:ManualScope) {
            # Handle both comma and space-separated values
            $scope = $Env:ManualScope -replace ',',' ' -replace '\s+',' '
            $packages, $invalidPackages = ($scope -split ' ').Where({ Test-Path $_ }, 'Split')
            "Scope:"
            $packages | ForEach-Object {
              "- $_"
            }
            "PackageScope=$packages" >> $Env:GITHUB_ENV
            if ($invalidPackages) {
              throw "Some packages do not exist or are invalid: `"$($invalidPackages -join '","')`""
            }
          } else {
            "No specific scope, all packages will be processed"
          }
        env:
          ManualScope: ${{ inputs.packages }}

      - name: Install AU
        run: |
          git clone -q https://github.com/majkinetor/au.git $Env:TEMP/au
          . "$Env:TEMP/au/scripts/Install-AU.ps1" $Env:au_version

      - name: Install chocolatey-core.extension # required for several packages
        run: cinst chocolatey-core.extension

      - name: Test packages
        if: github.event_name == 'pull_request' || github.event.schedule == '0 4 * * *' || inputs.type == 'Test packages'
        run: |
          $packages = if ($Env:PackageScope) {
            $Env:PackageScope -split ' '
          } else {
            "random $Env:au_test_groups"
          }
          ./test_all.ps1 -Name $packages -ThrowOnErrors
        env:
          au_NoGist: ${{ github.event_name != 'schedule' }}
          github_user_repo: ${{ github.repository }}
          github_api_key: ${{ secrets.GITHUB_TOKEN }}

      - name: Update packages
        if: github.event_name != 'pull_request' && github.event.schedule != '0 4 * * *' && inputs.type != 'Test packages'
        run: |
          $arguments = @{ }
          if ($Env:PackageScope) {
            $arguments.Name = $Env:PackageScope -split ' '
          }
          if ($Env:force_update -eq 'true') {
            if (!$Env:PackageScope) {
              throw "Packages are required if you want to force an update."
            }
            $arguments.Force = $true
          }
          ./update_all.ps1 @arguments -ThrowOnErrors -GitHubAction
        env:
          # au_push: true
          au_NoGist: ${{ github.event_name != 'schedule' }}
          force_update: ${{ inputs.force }}
          github_user_repo: ${{ github.repository }}
          github_api_key: ${{ secrets.GITHUB_TOKEN }}
          mail_pass: ${{ secrets.MAIL_PASS }}
          api_key: ${{ secrets.CHOCOLATEY_KEY }}

      - name: Publish report
        if: always() && hashFiles('Update-AUPackages.md', 'Update-Force-Test-*.md')
        run: Get-Content 'Update-AUPackages.md', 'Update-Force-Test-*.md' -ErrorAction SilentlyContinue >> $Env:GITHUB_STEP_SUMMARY

      - name: Publish history
        if: always() && hashFiles('Update-History.md')
        run: Get-Content 'Update-History.md' >> $Env:GITHUB_STEP_SUMMARY

      - name: Upload Info artifact
        uses: actions/upload-artifact@v3.1.0
        if: always() && hashFiles('update_info.xml')
        with:
          name: Info
          path: update_info.xml
