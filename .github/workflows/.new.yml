on:
  workflow_call:
    inputs:
      packages:
        description: Packages (comma-separated values)
        type: string
        default: ${{ github.workflow }}
      test:
        description: Test
        type: boolean
      force:
        description: Force update
        type: boolean

jobs:
  update:
    name: Update ${{ inputs.packages }}
    runs-on: windows-latest
    timeout-minutes: 20

    env:
      # Set au version to use or omit to use the latest. Specify branch name to use development version from Github
      au_version: master

    steps:
      - name: Set up git
        if: ${{ !inputs.test }}
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "<>"
          git config --global core.safecrlf false

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install AU
        run: |
          git clone -q https://github.com/majkinetor/au.git $Env:TEMP/au
          . "$Env:TEMP/au/scripts/Install-AU.ps1" $Env:au_version

      - name: Install chocolatey-core.extension # required for several packages
        run: choco install -y chocolatey-core.extension

      - name: Update packages
        id: updates
        run: |
          $arguments = @{
            Name = $Env:packages -replace ' ','' -split ','
          }
          if ($Env:test -ne 'true' -and $Env:force -eq 'true') {
            $arguments.Force = $true
          }
          $update = if ($Env:test -eq 'true') {
            './test_all.ps1'
          } else {
            './update_all.ps1'
          }
          [array] $packages = & $update @arguments -ThrowOnErrors -PassThru -UpdatesOnly | ForEach-Object {
            $_ | ConvertTo-Json -Compress
          }
          $packages = ConvertTo-Json $packages -Compress
          "Packages = $packages"
          "packages=$packages" >> $Env:GITHUB_OUTPUT
        env:
          packages: ${{ inputs.packages }}
          test: ${{ inputs.test }}
          force: ${{ inputs.force }}
          github_user_repo: ${{ github.repository }}
          github_api_key: ${{ secrets.GITHUB_TOKEN }}
          au_push: ${{ !inputs.test }}
          api_key: ${{ secrets.CHOCOLATEY_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish report
        if: always() && hashFiles('Update-AUPackages.md', 'Update-Force-Test*.md')
        run: Get-Content 'Update-AUPackages.md', 'Update-Force-Test*.md' -ErrorAction SilentlyContinue >> $Env:GITHUB_STEP_SUMMARY

      - name: Upload Info artifact
        if: always() && hashFiles('update_info.xml')
        uses: actions/upload-artifact@v3.1.2
        with:
          name: Info
          path: update_info.xml

      - name: Prepare Packages artifact
        if: always() && hashFiles('**/*.nupkg')
        run: |
          New-Item Packages -ItemType Directory
          Get-ChildItem *.nupkg -Recurse | Move-Item -Destination Packages

      - name: Upload Packages artifact
        if: always() && hashFiles('Packages/*.nupkg')
        uses: actions/upload-artifact@v3.1.2
        with:
          name: Packages
          path: Packages/*.nupkg

    outputs:
      updates: ${{ steps.updates.outputs.packages }}

  packages:
    if: needs.update.outputs.updates != 'null'
    needs: update

    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJSON(needs.update.outputs.updates) }}
        os:
          - windows-2019
          # - windows-2022

    name: Test ${{ fromJSON(matrix.package).name }} ${{ fromJSON(matrix.package).version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20

    env:
      PackageName: ${{ fromJSON(matrix.package).name }}
      PackageVersion: ${{ fromJSON(matrix.package).version }}

    steps:
      - name: Remove package if installed
        run: |
          if (choco list -r --local `"$Env:PackageName`") {
            choco uninstall -y `"$Env:PackageName`"
          }

      - name: Download Packages artifact
        uses: actions/download-artifact@v3.0.2
        with:
          name: Packages

      - name: Install package
        run: |
          choco install -y `"$Env:PackageName`" --version `"$Env:PackageVersion`" --source `"'.;https://community.chocolatey.org/api/v2/'`" --force --debug
          if ($LASTEXITCODE -in 1641, 3010) { exit 0 }
        timeout-minutes: 10

      - name: Determine package information path
        id: information
        run: |
          $path = Join-Path $Env:ChocolateyInstall ".chocolatey/$Env:PackageName.$Env:PackageVersion"
          $path = $path -replace '\\', '/'
          Get-ChildItem $path
          "path=$path" >> $Env:GITHUB_OUTPUT

      - name: Upload Information artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: Information ${{ env.PackageName }} ${{ env.PackageVersion }} on ${{ matrix.os }}
          path: ${{ steps.information.outputs.path }}

      - name: Uninstall package
        # AirServer requires Wireless-Networking while uninstalling, feature not installed on GitHub agents
        if: env.PackageName != 'airserver'
        run: |
          choco uninstall -y `"$Env:PackageName`" --debug
          if ($LASTEXITCODE -in 1605, 1614, 1641, 3010) { exit 0 }
        timeout-minutes: 10

      - name: Take failure screenshot
        if: failure()
        run: |
          choco install nircmd
          nircmd savescreenshotfull desktop.png

      - name: Upload failure screenshot into Information artifact
        if: failure()
        uses: actions/upload-artifact@v3.1.2
        with:
          name: Information ${{ env.PackageName }} ${{ env.PackageVersion }} on ${{ matrix.os }}
          path: desktop.png
