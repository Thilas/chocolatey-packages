name: ilspy

on:
  pull_request:         # Automatic test
    types: [opened, reopened, synchronize]
    branches: [master]
    paths:
      - .github/workflows/.common.yml
      # - .github/workflows/ilspy.yml
      - ilspy/**
      - Common.ps1
      - update_all.ps1
  schedule:
    - cron: 0 4 * * *   # Scheduled test
    - cron: 35 0-23/6 * * * # Scheduled update
  workflow_dispatch:    # Manual run
    inputs:
      type:
        description: Type
        type: choice
        required: true
        default: Test
        options:
          - Force update
          - Test
          - Update

jobs:
  job:
    name: ${{ inputs.type || (github.event_name == 'pull_request' || github.event.schedule == '0 4 * * *') && 'Test' || 'Update' }}
    uses: ./.github/workflows/.common.yml
    with:
      test: ${{ github.event_name == 'pull_request' || github.event.schedule == '0 4 * * *' || inputs.type == 'Test' }}
      force: ${{ inputs.type == 'Force update' }}
      test_cases: |
        - Start program
          $sw = [System.Diagnostics.Stopwatch]::StartNew()
          Start-Process ILSpy -LoadUserProfile -NoNewWindow -PassThru | Tee-Object -Variable p
          while (!($p | Where-Object MainWindowHandle -NE 0)) {
            $p | Select-Object MainWindowHandle, MainWindowTitle, Responding
            $p.SafeHandle
            if ($sw.ElapsedMilliseconds -gt 30000) {
              throw "Process start timed out."
            }
            Start-Sleep -Milliseconds 100
            Get-Process ILSpy | Tee-Object -Variable p
          }
          "Started in {0}ms" -f $sw.ElapsedMilliseconds
        - Close program
          Get-Process ILSpy | Tee-Object -Variable p
          #$p | Should -Not -BeNullOrEmpty
          $sw = [System.Diagnostics.Stopwatch]::StartNew()
          $p | ForEach-Object CloseMainWindow
          Wait-Process ILSpy -Timeout 30
          "Closed in {0}ms" -f $sw.ElapsedMilliseconds
    secrets: inherit
