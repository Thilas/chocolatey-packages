name: Test

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]
    branches: [ master ] # Automatic test on PR's scope (if any) or all packages
  schedule:
    - cron: 0 4 * * *    # Daily test of all packages
  workflow_dispatch:     # Manual run
    inputs:
      packages:
        description: Packages (optional, comma-separated values)
        type: string

jobs:
  build:
    name: Test package updates
    runs-on: windows-latest
    timeout-minutes: 20

    env:
      # Set au version to use or omit to use the latest. Specify branch name to use development version from Github
      au_version: master

      # ID of the gist used to save run results - create a gist under the github_user (secret or not) and grab the id - https://gist.github.com/name/id
      # Optional, leave empty to create anonymous gist
      gist_id: c09573f2f23bc2aa904d90ff63de2cfe

      # Force test: gist id for test results
      gist_id_test: 83dd81cb41ebc10ef87ee50b168aca3f

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Determine PR scope
        if: github.event_name == 'pull_request'
        run: |
          # PR title is expected to follow Conventional Commits
          # If so, packages will be specified in the commit scope
          if ($Env:PullRequestTitle -match '^\w+\((?<Scope>[^()\r\n]+)\)!?:') {
            # Handle both comma and space-separated values
            $scope = $Matches.Scope -replace ',',' ' -replace '\s+',' '
            $packages, $invalidPackages = ($scope -split ' ').Where({ Test-Path $_ }, 'Split')
            "Scope:"
            $packages | ForEach-Object { "- $_" }
            "PackageScope=$packages" >> $Env:GITHUB_ENV
            if ($invalidPackages) {
              throw "Some packages do not exist or are invalid: `"$($invalidPackages -join '","')`""
            }
          } else {
            "No specific scope, all packages will be processed"
          }
        env:
          PullRequestTitle: ${{ github.event.pull_request.title }}

      - name: Determine manual scope
        if: github.event_name == 'workflow_dispatch'
        run: |
          if ($Env:ManualScope) {
            # Handle both comma and space-separated values
            $scope = $Env:ManualScope -replace ',',' ' -replace '\s+',' '
            $packages, $invalidPackages = ($scope -split ' ').Where({ Test-Path $_ }, 'Split')
            "Scope:"
            $packages | ForEach-Object { "- $_" }
            "PackageScope=$packages" >> $Env:GITHUB_ENV
            if ($invalidPackages) {
              throw "Some packages do not exist or are invalid: `"$($invalidPackages -join '","')`""
            }
          } else {
            "No specific scope, all packages will be processed"
          }
        env:
          ManualScope: ${{ inputs.packages }}

      - name: Install AU
        run: |
          git clone -q https://github.com/majkinetor/au.git $Env:TEMP/au
          . "$Env:TEMP/au/scripts/Install-AU.ps1" $Env:au_version

      - name: Install chocolatey-core.extension # required for several packages
        run: choco install -y chocolatey-core.extension

      - name: Test package updates
        id: updates
        run: |
          $arguments = @{ }
          if ($Env:PackageScope) {
            $arguments.Name = $Env:PackageScope -split ' '
          } else {
            # Force test: use 1 to test all, or N to split testing into N groups
            $arguments.Name = "random 1"
          }
          [array] $packages = ./test_all.ps1 @arguments -ThrowOnErrors -PassThru -UpdatesOnly | ForEach-Object {
            $_ | ConvertTo-Json -Compress
          }
          $packages = ConvertTo-Json $packages -Compress
          "Packages = $packages"
          "packages=$packages" >> $Env:GITHUB_OUTPUT
        env:
          au_nogist: ${{ github.event_name != 'schedule' }}
          github_user_repo: ${{ github.repository }}
          github_api_key: ${{ secrets.GITHUB_TOKEN }}
          gist_token: ${{ secrets.GIST_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish report
        if: always() && hashFiles('Update-AUPackages.md', 'Update-Force-Test*.md')
        run: Get-Content 'Update-AUPackages.md', 'Update-Force-Test*.md' -ErrorAction SilentlyContinue >> $Env:GITHUB_STEP_SUMMARY

      - name: Prepare Packages artifact
        if: always() && hashFiles('**/*.nupkg')
        run: |
          New-Item Packages -ItemType Directory
          Get-ChildItem *.nupkg -Recurse | Move-Item -Destination Packages

      - name: Upload Packages artifact
        if: always() && hashFiles('Packages/*.nupkg')
        uses: actions/upload-artifact@v3.1.1
        with:
          name: Packages
          path: Packages/*.nupkg

    outputs:
      updates: ${{ steps.updates.outputs.packages }}

  test:
    name: Test packages
    needs: build

    uses: ./.github/workflows/test_packages.yml
    with:
      updates: ${{ needs.build.outputs.updates }}
