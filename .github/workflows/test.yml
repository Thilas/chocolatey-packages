name: Test

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]
    branches: [ master ] # Automatic test on PR's scope (if any) or all packages
  schedule:
    - cron: 0 4 * * *    # Daily test of all packages
  workflow_dispatch:     # Manual run
    inputs:
      packages:
        description: Packages (optional, comma-separated values)
        type: string

env:
  # Set au version to use or omit to use the latest. Specify branch name to use development version from Github
  au_version: master
  # Force test: use 1 to test all, or N to split testing into N groups
  au_test_groups: 1

  # ID of the gist used to save run results - create a gist under the github_user (secret or not) and grab the id - https://gist.github.com/name/id
  # Optional, leave empty to create anonymous gist
  gist_id: c09573f2f23bc2aa904d90ff63de2cfe

  # Force test: gist id for test results
  gist_id_test: 83dd81cb41ebc10ef87ee50b168aca3f

jobs:
  build:
    name: Test packages
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Show context
        run: |
          Get-CimInstance Win32_OperatingSystem -Property Caption, OSArchitecture, Version | Format-List Caption, OSArchitecture, Version
          $PSVersionTable
          git --version
          "chocolatey version $(choco --version)"

      - name: Determine PR scope
        if: github.event_name == 'pull_request'
        run: |
          # PR title is expected to follow Conventional Commits
          # If so, packages will be specified in the commit scope
          if ($Env:PullRequestTitle -match '^\w+\((?<Scope>[^()\r\n]+)\)!?:') {
            # Handle both comma and space-separated values
            $scope = $Matches.Scope -replace ',',' ' -replace '\s+',' '
            $packages, $invalidPackages = ($scope -split ' ').Where({ Test-Path $_ }, 'Split')
            "Scope:"
            $packages | ForEach-Object { "- $_" }
            "PackageScope=$packages" >> $Env:GITHUB_ENV
            if ($invalidPackages) {
              throw "Some packages do not exist or are invalid: `"$($invalidPackages -join '","')`""
            }
          } else {
            "No specific scope, all packages will be processed"
          }
        env:
          PullRequestTitle: ${{ github.event.pull_request.title }}

      - name: Determine manual scope
        if: github.event_name == 'workflow_dispatch'
        run: |
          if ($Env:ManualScope) {
            # Handle both comma and space-separated values
            $scope = $Env:ManualScope -replace ',',' ' -replace '\s+',' '
            $packages, $invalidPackages = ($scope -split ' ').Where({ Test-Path $_ }, 'Split')
            "Scope:"
            $packages | ForEach-Object { "- $_" }
            "PackageScope=$packages" >> $Env:GITHUB_ENV
            if ($invalidPackages) {
              throw "Some packages do not exist or are invalid: `"$($invalidPackages -join '","')`""
            }
          } else {
            "No specific scope, all packages will be processed"
          }
        env:
          ManualScope: ${{ inputs.packages }}

      - name: Install AU
        run: |
          git clone -q https://github.com/majkinetor/au.git $Env:TEMP/au
          . "$Env:TEMP/au/scripts/Install-AU.ps1" $Env:au_version

      - name: Install chocolatey-core.extension # required for several packages
        run: cinst chocolatey-core.extension

      - name: Test packages
        id: packages
        run: |
          $packages = if ($Env:PackageScope) {
            $Env:PackageScope -split ' '
          } else {
            "random $Env:au_test_groups"
          }
          [array] $updates = ./test_all.ps1 -Name $packages -ThrowOnErrors -PassThru -UpdatesOnly | ForEach-Object {
            $_ | ConvertTo-Json -Compress
          }
          $output = ConvertTo-Json $jsonUpdates -Compress
          Write-Output "Updates = `"$output`""
          "updates=$output" >> $GITHUB_OUTPUT
        env:
          au_nogist: ${{ github.event_name != 'schedule' }}
          github_user_repo: ${{ github.repository }}
          github_api_key: ${{ secrets.GITHUB_TOKEN }}
          gist_token: ${{ secrets.GIST_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish report
        if: always() && hashFiles('Update-AUPackages.md', 'Update-Force-Test*.md')
        run: Get-Content 'Update-AUPackages.md', 'Update-Force-Test*.md' -ErrorAction SilentlyContinue >> $Env:GITHUB_STEP_SUMMARY

      - name: Publish history
        if: always() && hashFiles('Update-History.md')
        run: Get-Content 'Update-History.md' >> $Env:GITHUB_STEP_SUMMARY

      - name: Upload Packages artifact
        uses: actions/upload-artifact@v3.1.1
        if: always() && hashFiles('**/*.nupkg')
        with:
          name: Packages
          path: '**/*.nupkg'

    outputs:
      updates: ${{ steps.packages.outputs.updates }}

  test:
    if: github.event_name == 'pull_request'
    needs: build

    strategy:
      fail-fast: false
      matrix:
        # package: ${{ fromJson(needs.build.outputs.updates) }}
        os:
          - windows-2019
          - windows-2022

    # name: Deploy ${{ fromJson(matrix.package).name }} v${{ fromJson(matrix.package).version }} on ${{ matrix.os }}
    name: Deploy on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      # - name: Download Packages artifact
      #   uses: actions/download-artifact@v3.0.1
      #   with:
      #     name: Packages

      - name: Test package
        run: |
          Write-Output "Updates = `"$Env:Updates`""
          return
          # Test package
          $guid = New-Guid
          # Get-ChildItem *.nupkg -Recurse | ForEach-Object {
            # $package = $_.Directory.Name
            # $version = $_.BaseName.Substring($package.Length + 1)
            $package = $Env:PackageName
            $version = $Env:PackageVersion

            Write-Output "::group::Install $package v$version"
            # Write-Output "::stop-commands::$guid"
            # choco install -y --force --debug `"$_`"
            choco install -y --force --debug `"$Env:NupkgPath`"
            # Write-Output "::$guid::"
            Write-Output "::endgroup::"
            if ($LASTEXITCODE) {
              throw "Unable to install $package v$version"
            }

            Write-Output "::group::Uninstall $package v$version"
            # Write-Output "::stop-commands::$guid"
            choco uninstall -y --debug `"$package`"
            # Write-Output "::$guid::"
            Write-Output "::endgroup::"
            if ($LASTEXITCODE) {
              throw "Unable to uninstall $package v$version"
            }
          # }
        env:
          Updates: ${{ needs.build.outputs.updates }}
          # PackageName: ${{ fromJson(matrix.package).name }}
          # PackageVersion: ${{ fromJson(matrix.package).version }}
          # NupkgPath: ${{ fromJson(matrix.package).name }}/${{ fromJson(matrix.package).name }}.${{ fromJson(matrix.package).version }}.nupkg
