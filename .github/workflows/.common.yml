on:
  workflow_call:
    inputs:
      packages:
        description: Packages (comma-separated values)
        type: string
        default: ${{ github.workflow }}
      test:
        description: Test update
        type: boolean
      force:
        description: Force update
        type: boolean
      cleanup:
        description: Optional cleanup script to run at the beginning of tests
        type: string
      uninstall:
        description: Uninstall package
        type: boolean
        default: true
      test_cases:
        description: |
          List of test cases
          - {one-line script}
          - {title}
            {multi-line script}
        type: string

jobs:
  update:
    name: Update ${{ github.workflow }}
    runs-on: windows-latest
    timeout-minutes: 20

    env:
      # Set au version to use or omit to use the latest. Specify branch name to use development version from Github
      au_version: release

    steps:
      - name: Set up git
        if: ${{ !inputs.test }}
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "<>"
          git config --global core.safecrlf false

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install AU
        run: |
          git clone -q https://github.com/Thilas/chocolatey-au.git -b release "$env:TEMP/au"
          . "$env:TEMP/au/scripts/Install-AU.ps1" $env:au_version

      - name: Update packages
        id: updates
        run: |
          "Chocolatey v$(choco --version)"
          $names = $env:packages -replace " ","" -split ","
          $force = $env:force -eq "true"
          [array] $packages = ./update_all.ps1 -Name $names -Force:$force | ForEach-Object {
            $_ | ConvertTo-Json -Compress
          }
          $packagesJson = ConvertTo-Json $packages -Compress
          "Packages = $packagesJson"
          if ($force -and $names.Length -ne $packages.Length) {
            throw "Some expected packages were not updated."
          }
          "packages=$packagesJson" >> $env:GITHUB_OUTPUT
        env:
          packages: ${{ inputs.packages }}
          force: ${{ inputs.test || inputs.force }}
          github_user_repo: ${{ github.repository }}
          github_api_key: ${{ secrets.GITHUB_TOKEN }}
          au_push: ${{ !inputs.test }}
          api_key: ${{ secrets.CHOCOLATEY_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish report
        if: ${{ always() && hashFiles('report.md') }}
        run: Get-Content "report.md" >> $env:GITHUB_STEP_SUMMARY

      - name: Prepare Packages artifact
        if: ${{ always() && hashFiles('**/*.nupkg') }}
        run: |
          New-Item Packages -ItemType Directory
          Get-ChildItem *.nupkg -Recurse | Move-Item -Destination Packages

      - name: Upload Packages artifact
        if: ${{ always() && hashFiles('Packages/*.nupkg') }}
        uses: actions/upload-artifact@v4
        with:
          name: Packages
          path: Packages/*.nupkg

      - name: Upload Test artifact
        if: ${{ hashFiles('Packages/*.nupkg') }}
        uses: actions/upload-artifact@v4
        with:
          name: Test
          path: test.ps1

    outputs:
      updates: ${{ steps.updates.outputs.packages }}

  test:
    needs: [update]
    if: ${{ needs.update.outputs.updates != 'null' }}

    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJSON(needs.update.outputs.updates) }}
        os:
          - windows-2022
          # - windows-2025

    name: Test ${{ fromJSON(matrix.package).name }} ${{ fromJSON(matrix.package).version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20

    env:
      package_name: ${{ fromJSON(matrix.package).name }}
      package_version: ${{ fromJSON(matrix.package).version }}

    steps:
      - name: Cleanup environment
        run: |
          "Chocolatey v$(choco --version)"
          choco list --exact --limit-output $env:package_name | Tee-Object -Variable installed
          if ($installed) {
            choco uninstall -y --no-progress $env:package_name
          }
          if ($env:cleanup) {
            Invoke-Expression $env:cleanup
          }
        env:
          cleanup: ${{ inputs.cleanup }}

      - name: Download Packages artifact
        uses: actions/download-artifact@v5
        with:
          name: Packages

      - name: Download Test artifact
        uses: actions/download-artifact@v5
        with:
          name: Test

      - name: Tests before install
        if: ${{ inputs.test_cases }}
        run: ./test.ps1 -Inverse
        env:
          test_cases: ${{ inputs.test_cases }}
          screenshot_prefix: desktop

      - name: Install package
        run: |
          $debug = if ($env:RUNNER_DEBUG) { "--verbose --debug" }
          choco install -y --no-progress $env:package_name --version $env:package_version --source "'.;https://community.chocolatey.org/api/v2/'" $debug
          if ($LASTEXITCODE -in 1641, 3010) { exit 0 }
        timeout-minutes: 10

      - name: Determine package information path
        id: information
        run: |
          $path = Join-Path $env:ChocolateyInstall ".chocolatey/$env:package_name.$env:package_version"
          $path = $path -replace "\\", "/"
          Get-ChildItem $path
          "path=$path" >> $env:GITHUB_OUTPUT

      - name: Upload Information artifact
        uses: actions/upload-artifact@v4
        with:
          name: Information ${{ env.package_name }} ${{ env.package_version }} on ${{ matrix.os }}
          path: ${{ steps.information.outputs.path }}

      - name: Tests after install
        if: ${{ inputs.test_cases }}
        run: ./test.ps1
        env:
          test_cases: ${{ inputs.test_cases }}
          screenshot_prefix: desktop

      - name: Uninstall package
        if: ${{ inputs.uninstall }}
        run: |
          $debug = if ($env:RUNNER_DEBUG) { "--verbose --debug" }
          choco uninstall -y --no-progress --remove-dependencies $env:package_name $debug
          if ($LASTEXITCODE -in 1605, 1614, 1641, 3010) { exit 0 }
        timeout-minutes: 10

      - name: Tests after uninstall
        if: ${{ inputs.test_cases }}
        run: ./test.ps1 -Inverse
        env:
          test_cases: ${{ inputs.test_cases }}
          screenshot_prefix: desktop

      - name: Take failure screenshot
        if: ${{ failure() }}
        run: |
          choco install -y --no-progress nircmd
          nircmd savescreenshotfull desktop.png

      - name: Upload failure screenshot into Information artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: Information ${{ env.package_name }} ${{ env.package_version }} on ${{ matrix.os }}
          path: desktop*.png
